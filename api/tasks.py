<<<<<<< HEAD
#from models.task import Tasks, db
from models.position import Position, Tasks, db
from datetime import datetime

def addTask(body, task_id):  
=======
from .models.position import Position, TypeEnum
from .models.task import Task
from .models.connection import connection
from datetime import datetime

db = connection.db

def addTask(body):  
>>>>>>> bf886af9a672e8ba6b62523211f17f33691d47c5
    """Create a new Task

    :param body: 
    :type body: dict | bytes
    :param task_id: ID of task
    :type task_id: str

    :rtype: None
    """
    
    # if connexion.request.is_json:
<<<<<<< HEAD
    #     body = Task.from_dict(connexion.request.get_json())
    task = Tasks(task_id, datetime.now())
    db.session.add(task)
    db.session.commit()
    accident = Position('accident', task_id, datetime.now(), 'Destination', '', body['accident_latitude'], body['accident_longitude'], 1)
    departure = Position('departure', task_id, datetime.now(), 'Departure', '', body['departure_latitude'], body['departure_longitude'], 0)
    destination = Position('destination', task_id, datetime.now(), 'Destination', '', body['hospital_latitude'], body['hospital_longitude'], 2)
    p = [accident, departure, destination]
    db.session.add_all(p)
    db.session.commit()
    #return 'do some magic!'
=======
    #     body = Task.from_dict(connexion.request.get_json())  
    task = Task(datetime.now())
    task.add()
>>>>>>> bf886af9a672e8ba6b62523211f17f33691d47c5

    accident = Position(
        task_id=task.id, created_at=datetime.now(), 
        type=TypeEnum.Destination, generated_at=None,
        latitude=body['accident_latitude'], longitude=body['accident_longitude'], 
        sequence=1)
    departure = Position(
        task_id=task.id, created_at=datetime.now(), 
        type=TypeEnum.Departure, generated_at=None, 
        latitude=body['departure_latitude'], longitude=body['departure_longitude'], 
        sequence=0)
    destination = Position(
        task_id=task.id, created_at=datetime.now(), 
        type=TypeEnum.Destination, generated_at=None, 
        latitude=body['hospital_latitude'], longitude=body['hospital_longitude'], 
        sequence=2)
    p = [accident, departure, destination]
    db.session.add_all(p)
    db.session.commit()

    return {"taskId":task.id}

def findTask(task_id):  
    """Finds task by id

    :param task_id: ID of task that needs to be found. ID was generated By Server.
    :type task_id: str

    :rtype: Task
    """
<<<<<<< HEAD
    task_query = Tasks.query.filter(Tasks.id==task_id)
    position_query = Position.query.filter(Position.task_id==task_id).order_by(Position.uid in ['accident','departure','destination'])
    print(task_query)
    print(position_query)

if __name__=='__main__':
    body = {
        "accident_latitude": 12,
        "accident_longitude": 46,
        "departure_latitude": 38,
        "departure_longitude": 27,
        "hospital_latitude": 3,
        "hospital_longitude": 18,
        "id": "4"
        }
    addTask(body,body['id'])
=======
    positions = Position.findDepartureAndDestination(task_id)
    dic = {}
    for position in positions:
        if position.type.value == TypeEnum.Departure.value:
            d = {
                'departure_latitude': position.latitude,
                'departure_longitude': position.longitude
            }
            dic.update(d)
        elif position.type.value == TypeEnum.Destination.value:
            if position.sequence == 1:
                d = {
                    'accident_latitude': position.latitude,
                    'accident_longitude': position.longitude
                }
                dic.update(d)

            elif position.sequence == 2:
                d = {
                    'hospital_latitude': position.latitude,
                    'hospital_longitude': position.longitude
                }
                dic.update(d)
            
    return dic
>>>>>>> bf886af9a672e8ba6b62523211f17f33691d47c5
