from .models.position import Position, TypeEnum
from .models.task import Task
from .models.track import Track
from .models.connection import connection
from datetime import datetime

import json

db = connection.db

def addTask(body):  
    """Create a new Task

    :param body: 
    :type body: dict | bytes
    :param task_id: ID of task
    :type task_id: str

    :rtype: None
    """
    
    # if connexion.request.is_json:
    #     body = Task.from_dict(connexion.request.get_json())  
    task = Task(datetime.now())
    task.add()

    accident = Position(
        task_id=task.id, created_at=datetime.now(), 
        type=TypeEnum.Destination, generated_at=None,
        latitude=body['accident_latitude'], longitude=body['accident_longitude'], 
        sequence=1)
    departure = Position(
        task_id=task.id, created_at=datetime.now(), 
        type=TypeEnum.Departure, generated_at=None, 
        latitude=body['departure_latitude'], longitude=body['departure_longitude'], 
        sequence=0)
    destination = Position(
        task_id=task.id, created_at=datetime.now(), 
        type=TypeEnum.Destination, generated_at=None, 
        latitude=body['hospital_latitude'], longitude=body['hospital_longitude'], 
        sequence=2)
    p = [accident, departure, destination]
    db.session.add_all(p)

    try:
        db.session.commit()
        return {"taskId":task.id}
    except:
        db.session.rollback()
        raise
    finally:
        db.session.close()


def findTask(task_id):  
    """Finds task by id

    :param task_id: ID of task that needs to be found. ID was generated By Server.
    :type task_id: str

    :rtype: Task
    """
    positions = Position.findDepartureAndDestination(task_id)
    dic = {}
    for position in positions:
        if position.type.value == TypeEnum.Departure.value:
            d = {
                'departure_latitude': round(position.latitude, 5),
                'departure_longitude': round(position.longitude, 5)
            }
            dic.update(d)
        elif position.type.value == TypeEnum.Destination.value:
            if position.sequence == 1:
                d = {
                    'accident_latitude': round(position.latitude, 5),
                    'accident_longitude': round(position.longitude, 5)
                }
                dic.update(d)

            elif position.sequence == 2:
                d = {
                    'hospital_latitude': position.latitude,
                    'hospital_longitude': position.longitude
                }
                dic.update(d)
    return dic

def findAllTask():
    tasks = Task.findall()
    rtn = []
    for task in tasks:
        positions = Position.findDepartureAndDestination(task.id)
        
        dic = {} #main dict
        info = {} #subdict for position iteration
        
        #fetch position info
        for position in positions:
            if position.type.value == TypeEnum.Departure.value:
                info['departure_latitude'] = round(position.latitude, 5)
                info['departure_longitude'] = round(position.longitude, 5)
                
            elif position.type.value == TypeEnum.Destination.value:
                if position.sequence == 1:
                    info['accident_latitude'] = round(position.latitude, 5)
                    info['accident_longitude'] = round(position.longitude, 5)

                elif position.sequence == 2:
                    info['hospital_latitude'] = round(position.latitude, 5)
                    info['hospital_longitude'] =round(position.longitude, 5)
        
        #fetch track info
        track = Track.findLatest(task.id)
        info['roadIds'] = track.roadIds if track is not None else None

        #put data from subdict into main dict
        dic['Info'] = info
        dic["ID"] = task.id
        
        #append main dict into return dict
        rtn.append(dic)
    return rtn

def findLatest():
    task = Task.findLatest()
    return task